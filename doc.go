// Package jsonrest implements a microframework for writing RESTful web
// applications.
//
// Endpoints are defined as:
//     func(ctx context.Context, req *jsonrest.Request) (interface{}, error)
//
// If an endpoint returns a value along with a nil error, the value will be
// rendered to the client as JSON with status code 200. You can also return
// a Response object if you need another type of success code (e.g. 204).
//
// If an error is returned, it will be sanitized and returned to the client as
// json. Errors generated by a call to `jsonrest.Error(status, code, message)`
// will be rendered as-is to the client, along with the given HTTP status code.
// Any other errors will be obfuscated to the caller (unless `router.DumpError`
// is enabled).
//
// Example
//
//     func main() {
//         r := jsonrest.NewRouter()
//         r.Use(logging)
//         r.Get("/", hello)
//     }
//
//     func hello(ctx context.Context, req *jsonrest.Reqeust) (interface{}, error) {
//         return jsonrest.M{"message": "Hello, world"}, nil
//     }
//
//     func logging(next jsonrest.Endpoint) jsonrest.Endpoint {
//         return func(ctx context.Context, req *jsonrest.Request) (interface{}, error) {
//             start := time.Now()
//             defer func() {
//                 log.Printf("%s (%v)\n", req.URL().Path, time.Since(start))
//             }()
//             return next(ctx, req)
//         }
//     }
package jsonrest
